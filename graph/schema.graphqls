# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Upload

type CommentList {
  list: [Comment!]!
  count: Int!
}

type PostComment {
  id: ID!
  author: FeedUser!
  text: String!
  likes: Int!
  liked: Boolean!
  timestamp: String!
}

type Comment {
  id: ID!
  author: String!
  text: String!
  likeCount: Int!
  likes: [String!]!
  timestamp: String!
}

type Post {
  id: ID!
  author: String!
  description: String
  content: String!
  timestamp: String!
  comments: CommentList!
  likeCount: Int!
  likes: [String!]!
  liked: Boolean!
  bidID: String
}

type FeedUser {
  nickname: String!
  name: String!
  picture: String!
}

type FeedPost {
  id: ID!
  author: FeedUser!
  description: String
  content: String!
  timestamp: String!
  comments: CommentList!
  likes: Int!
  liked: Boolean!
  bidID: String
}

type FeedAuction {
  id: ID!
  host: FeedUser!
  description: String!
  offer: Float!
  bids: [Bid!]!
  timestamp: String!
  deadline: String!
}

type Bid {
  id: ID!
  issuer: String!
  deadline: String!
  price: Float!
  timestamp: String!
  selected: Boolean!
}

type Auction {
  id: ID!
  host: String!
  description: String!
  offer: Float!
  bids: [Bid!]!
  timestamp: String!
  deadline: String!
}

type Message {
  chatID: ID!
  message: String!
  timestamp: String!
  sender: String!
}

type Chat {
  id: ID!
  users: [String!]!
  messages: [Message!]!
}

type User {
  nickname: String!
  name: String!
  email: String!
  bio: String!
  picture: String!
  cover: String!
  followers: [String!]!
  followersCount: Int!
  following: [String!]!
  lat: Float!
  lng: Float!
}

type Order {
  id: String!
	paymentID: String!
	paymentURL: String!
	payerID: String
	auctionID: String!
	bidID: String!
	status: String!
}

type Login {
  token: String!
  first: Boolean!
}

type Query {
  users(nickname: String = "", page: Int = 1): [User!]!
  self: User!
  feed(page: Int = 1): [FeedPost!]!
  trending(page: Int = 1): [FeedPost!]!
  user(nickname: String!): User!
  userPosts(nickname: String!, page: Int = 1): [Post!]!
  comments(postID: String!, page: Int = 1): [PostComment!]!
  tags: [String!]!
  userTags(nickname: String!): [String!]!
  usersByTags(tags: [String!]!, page: Int = 1): [User!]!
  auctions(page: Int = 1): [FeedAuction!]!
  order(orderID: String!): Order!
  orders: [Order!]!
  login(nickname: String!, password: String!): Login!
  isFollowing(nickname: String!): Boolean!
  acceptedBids: [FeedAuction!]!
  bidPaymentLink(auctionID: String!, bidID: String!): String!
}

input NewUser {
  nickname: String!
  name: String!
  email: String!
  password: String!
}

type Mutation {
  createUser(input: NewUser!): User!
  updateUserPicture(picture: Upload!): String!
  updateUserLocation(lat: Float!, lng: Float!): Boolean!
  updateUserBio(bio: String!): Boolean!
  updateUserCover(cover: Upload!): String!
  updateUserTags(tags: [String!]!): Boolean!
  addTagToUser(tag: String!): Boolean!
  removeTagFromUser(tag: String!): Boolean!
  follow(nickname: String!): Boolean!
  unfollow(nickname: String!): Boolean!
  sendMessage(msg: String!, receiver: String!): Boolean!
  sendMessageToDialogflow(msg: String!): String!
  createPost(content: Upload!, description: String, bidID: String): String!
  editPost(postID: String!, description: String!): Boolean!
  deletePost(postID: String!): Boolean!
  likeComment(postID: String!, commentID: String!): Boolean!
  likePost(postID: String!): Boolean!
  commentOnPost(postID: String!, message: String!): String!
  editComment(postID: String!, commentID: String!, message: String!): Boolean!
  deleteComment(postID: String!, commentID: String!): Boolean!
  createAuction(offer: Float!, description: String!): Auction!
  deleteAuction(auctionID: String!): Boolean!
  createBid(auctionID: String!, deadline: String!, price: Float!): Bid!
  deleteBid(auctionID: String!, bidID: String!): Boolean!
  acceptBid(auctionID: String!, bidID: String!): Boolean!
  sendForgotPasswordEmail(nickname: String!): Boolean!
  resetPassword(token: String!, newPassword: String!): Boolean!
}

type Subscription {
  newChatMessage: Message!
}