# GraphQL schema example
#
# https://gqlgen.com/getting-started/

scalar Time
scalar Upload

type CommentList {
  list: [Comment!]!
  count: Int!
}

type Comment {
  id: ID!
  author: String!
  text: String!
  likeCount: Int!
  likes: [String!]!
  timestamp: Time!
}

type Post {
  id: ID!
  author: String!
  description: String
  content: String!
  timestamp: Time!
  comments: CommentList!
  likeCount: Int!
  likes: [String!]!
}

type Bid {
  id: ID!
  issuer: String!
  deadline: String!
  price: Float!
  timestamp: Time!
}

type Auction {
  id: ID!
  host: String!
  description: String!
  offer: Float!
  bids: [Bid!]!
  timestamp: Time!
  deadline: Time!
}

type Message {
  chatID: ID!
  message: String!
  timestamp: Time!
  sender: String!
}

type Chat {
  id: ID!
  users: [String!]!
  messages: [Message!]!
}

type User {
  nickname: String!
  name: String!
  email: String!
  picture: String!
  followers: [String!]!
  followersCount: Int!
  following: [String!]!
}

type Query {
  users: [User!]!
  self: User!
  feed(page: Int = 1): [Post!]!
  trending(page: Int = 1): [Post!]!
  user(nickname: String!): User!
  userPosts(nickname: String!, page: Int = 1): [Post!]!
  usersByTags(tags: [String!]!, page: Int = 1): [User!]!
  auctions(page: Int = 1): [Auction!]!
  login(nickname: String!, password: String!): String!
  isFollowing(nickname: String!): Boolean!
}

input NewUser {
  nickname: String!
  name: String!
  email: String!
  password: String!
}

type Mutation {
  createUser(input: NewUser!): User!
  updateUserPicture(picture: Upload!): String!
  addTagToUser(tag: String!): Boolean!
  removeTagFromUser(tag: String!): Boolean!
  follow(nickname: String!): Boolean!
  unfollow(nickname: String!): Boolean!
  sendMessage(msg: String!, receiver: String!): Boolean!
  sendMessageToDialogflow(msg: String!): String!
  createPost(content: Upload!, description: String): String!
  deletePost(postID: String!): Boolean!
  likeComment(postID: String!, commentID: String!): Boolean!
  likePost(postID: String!): Boolean!
  commentOnPost(postID: String!, message: String!): String!
  deleteComment(postID: String!, commentID: String!): Boolean!
  createAuction(offer: Float!, description: String!): Auction!
  createBid(auctionID: String!, deadline: String!, price: Float!): Bid!
}

type Subscription {
  newChatMessage: Message!
}